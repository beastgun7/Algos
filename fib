Jonathan:

JS solution 1:
var fib = function(N) {
  if (N == 0) {
    return 0;
  }
  if (N < 2) {
    return 1;
  }
  var current = 1;
  var previous = 1;
  while (N != 2) {
    var aux = current;
    current += previous;
    previous = aux;
    N--;
  }
  return current;
};
console.log(fib(6));

//Runtime: 52 ms, faster than 79.79%
//Memory Usage: 33.9 MB, less than 68.18%

JS solution 2:

function fib(N) {
  if (N == 0 || N == 1) {
    return N;
  }
  F1 = 0;
  F2 = 1;
  for (var i = 1; i < N; i++) {
    sum = F1 + F2;
    F1 = F2;
    F2 = sum;
  }
  return F2;
}
console.log(fib(6));

//Runtime: 44 ms, faster than 98.19%
//Memory Usage: 33.8 MB, less than 86.36%

Py Solution 1:

def fib(N):
if(N == 0):
    return 0
if(N < 2):
    return 1
current = 1
previous = 1
while (N != 2):
    aux = current
    current = current + previous
    previous = aux
    N = N - 1
return current

print(fib(6))

# Runtime: 36 ms, faster than 73.54%
# Memory Usage: 13.9 MB, less than 5.80%

Py Solution 2:

def fib(N):
    if(N == 0 or N == 1):
        return N
    F1 = 0
    F2 = 1
    i = 1
    while(i < N):
        sum = F1 + F2
        F1 = F2
        F2 = sum
        i = i+1
    return F2

print(fib(6))

# Runtime: 32 ms, faster than 91.18%
# Memory Usage: 13.7 MB, less than 5.80%

Pete:
function fib(N) {

}
console.log(fib(6));
