Prompt:

Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer 
range: [âˆ’231,  231 âˆ’ 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

Jonathan:

var reverse = function(x) {
  var num = Math.abs(x);

  let reverseNum = num
    .toString()
    .split("")
    .reverse()
    .join("");
  if (reverseNum > 2 ** 31 || -reverseNum < -(2 ** 31) || x == 0) {
    return 0;
  }
  if (x < 0) {
    return -parseInt(reverseNum);
  } else {
    return parseInt(reverseNum);
  }
};
console.log(reverse(120));
console.log(reverse(247));
console.log(reverse(-247));

//Runtime: 72 ms, faster than 77.97%
//Memory Usage: 35.8 MB, less than 78.12%
